{"remainingRequest":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue","mtime":1643891557953},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/babel-loader/lib/index.js","mtime":1643881613258},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js","mtime":1643881624354}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCnZhciBXZWIzID0gcmVxdWlyZSgid2ViMyIpOwpjb25zdCBBQklfNzIxID0gcmVxdWlyZSgiLi4vdXRpbC9hYmk3MjEuanNvbiIpOwpjb25zdCBBQklfMTE1NSA9IHJlcXVpcmUoIi4uL3V0aWwvYWJpMTE1NS5qc29uIik7CmNvbnN0IGF4aW9zID0gcmVxdWlyZSgiYXhpb3MiKTsKY29uc3QgRm9ybURhdGEgPSByZXF1aXJlKCJmb3JtLWRhdGEiKTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWludCIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHdlYjM6IG5ldyBXZWIzKHdpbmRvdy5ldGhlcmV1bSksCiAgICAgIGNvbnRyYWN0QWRkcmVzczogIiIsCiAgICAgIGFjY291bnQ6ICIiLAogICAgICBpc0NvbnRyYWN0Q2hlY2tlZDogIiIsCiAgICAgIC8vIGNvbnRyYWN0OiB7fSwKICAgICAgbGljZW5zZTogIiIsCiAgICAgIHNpZ25hdHVyZTogIiIsCiAgICAgIGNvZGU6ICIiLAogICAgICBsaWNlbnNlczogWwogICAgICAgICJDQyBCWSIsCiAgICAgICAgIkNDIEJZLVNBIiwKICAgICAgICAiQ0MgQlktTkMiLAogICAgICAgICJDQyBCWS1OQy1TQSIsCiAgICAgICAgIkNDIEJZLU5EIiwKICAgICAgICAiQ0MgQlktTkMtTkQiLAogICAgICAgICJDQzAiLAogICAgICBdLAogICAgICBmaWxlVG9NaW50OiB7fSwKICAgICAgaXNVcGxvYWRpbmdJUEZTOiBmYWxzZSwKICAgICAgaXNVcGxvYWRpbmdNZXRhZGF0YTogZmFsc2UsCiAgICAgIGlzTWludGluZzogZmFsc2UsCiAgICAgIG5hbWU6ICIiLAogICAgICBpcGZzRmlsZTogIiIsCiAgICAgIGlwZnNNZXRhZGF0YTogIiIsCiAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgYXhpb3M6IGF4aW9zLAogICAgICBhbW91bnQ6ICIiLAogICAgICBpbmZ1cmFVUkw6ICJodHRwczovL2lwZnMuaW5mdXJhLmlvOjUwMDEvYXBpL3YwL2FkZCIsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuY29ubmVjdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgY29ubmVjdCgpIHsKICAgICAgY29uc3QgYXBwID0gdGhpczsKICAgICAgd2luZG93LmV0aGVyZXVtLmVuYWJsZSgpOwogICAgICBsZXQgYWNjb3VudHMgPSBhd2FpdCBhcHAud2ViMy5ldGguZ2V0QWNjb3VudHMoKTsKICAgICAgLy8gdGhpcy5jb250cmFjdCA9IGNvbnRyYWN0OwogICAgICBhcHAuYWNjb3VudCA9IGFjY291bnRzWzBdOwogICAgICAvLyBmYXJlIHVuIGZldGNoIHBlciB2ZWRlcmUgc2UgYyfDqCBsJ2luZGlyaXp6byBkZWwgY29udHJhdHRvIG5lbGxvIHN0b3JhZ2UKICAgICAgbGV0IGNvbnRyYWN0Q2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKAogICAgICAgICJjb250cmFjdC0xMTU1IiwKICAgICAgICBhcHAuY29udHJhY3RBZGRyZXNzCiAgICAgICk7CiAgICAgIGNvbnNvbGUubG9nKCJDb250cmFjdCBhZGRyZXNzIGluc2VydGVkIiwgY29udHJhY3RDaGVja2VkKTsKICAgICAgaWYgKAogICAgICAgIGNvbnRyYWN0Q2hlY2tlZCAhPT0gbnVsbCAmJgogICAgICAgIGNvbnRyYWN0Q2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgY29udHJhY3RDaGVja2VkLmxlbmd0aCA+IDAKICAgICAgKSB7CiAgICAgICAgYXBwLmlzQ29udHJhY3RDaGVja2VkID0gdHJ1ZTsKICAgICAgICBjb25zb2xlLmxvZyhhcHAuaXNDb250cmFjdENoZWNrZWQpOwogICAgICB9IGVsc2UgewogICAgICAgIGFwcC5pc0NvbnRyYWN0Q2hlY2tlZCA9IGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIGFzeW5jIGZldGNoQ29udHJhY3QoKSB7CiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7CiAgICAgIGNvbnNvbGUubG9nKCJmZXRjaGluZyBjb250cmFjdCIpOwogICAgICB0cnkgewogICAgICAgIGxldCBjaGVja0NvbnRyYWN0MTE1NSA9IGF3YWl0IG5ldyBhcHAud2ViMy5ldGguQ29udHJhY3QoCiAgICAgICAgICBBQklfMTE1NSwKICAgICAgICAgIGFwcC5jb250cmFjdEFkZHJlc3MsCiAgICAgICAgICB7CiAgICAgICAgICAgIGdhc0xpbWl0OiAiNTAwMDAwMCIsCiAgICAgICAgICB9CiAgICAgICAgKTsKICAgICAgICBjb25zb2xlLmxvZyhjaGVja0NvbnRyYWN0MTE1NSk7CiAgICAgICAgaWYgKGNoZWNrQ29udHJhY3QxMTU1Lm1ldGhvZHMucHJlcGFyZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygic3RhcnRpbmcgY2hlY2tpbmcgY29udHJhY3QgMTE1NSIpOwogICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImNvbnRyYWN0LTExNTUiLCBhcHAuY29udHJhY3RBZGRyZXNzKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCIxMTU1IGlzIGNoZWNrZWQiLCBjaGVja0NvbnRyYWN0MTE1NSk7CiAgICAgICAgICBhcHAuaXNDb250cmFjdENoZWNrZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsZXQgY2hlY2tDb250cmFjdDcyMSA9IGF3YWl0IG5ldyBhcHAud2ViMy5ldGguQ29udHJhY3QoCiAgICAgICAgICAgIEFCSV83MjEsCiAgICAgICAgICAgIGFwcC5jb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBnYXNMaW1pdDogIjUwMDAwMDAiLAogICAgICAgICAgICB9CiAgICAgICAgICApOwogICAgICAgICAgaWYgKGNoZWNrQ29udHJhY3Q3MjEubWV0aG9kcy5yZXR1cm5Ub2tlblVSSSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJzdGFydGluZyBjaGVja2luZyBjb250cmFjdCA3MjEiKTsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImNvbnRyYWN0LTc1NSIsIGFwcC5jb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgICBjb25zb2xlLmxvZygiNzIxIGlzIGNoZWNrZWQiLCBjaGVja0NvbnRyYWN0MTE1NSk7CiAgICAgICAgICAgIGFwcC5pc0NvbnRyYWN0Q2hlY2tlZCA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydCgiVGhlIGNvbnRyYWN0IGFkZHJlc3MgdGhhdCB5b3UgaGF2ZSBpbnNlcnRlZCBpdCdzIG5vdCB2YWxpZCIpOwogICAgICAgICAgICBjb25zb2xlLmxvZygiS0VSTkVMIFBBTklDIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgYWxlcnQoImVycm9yIik7CiAgICAgIH0KICAgIH0sCgogICAgYXN5bmMgdXBsb2FkRmlsZSgpIHsKICAgICAgY29uc3QgYXBwID0gdGhpczsKICAgICAgaWYgKGFwcC5maWxlVG9NaW50Lm5hbWUgJiYgIWFwcC5pc1VwbG9hZGluZ0lQRlMpIHsKICAgICAgICAvL2NoaWVkZXJlIGZpcm1hIGRpIHVuIG1lc3NhZ2dpbyBhbCBtZXRhbWFzayAoIkNyZWF0ZSBtZXRhZGF0YSBmb3IgIGFwcC5maWxlVG9NaW50Lm5hbWUgYXQgbmV3IERhdGUoKS5nZXRUaW1lKCkiKQogICAgICAgIC8vcGVyIG1hbmRhcmUgaWwgbWVzc2FnZ2lvIGZhcmUgdW5hIGNoaWFtYXRhOgogICAgICAgIGFwcC5jb2RlID0KICAgICAgICAgICJDcmVhdGUgbWV0YWRhdGEgZm9yICIgKwogICAgICAgICAgYXBwLmZpbGVUb01pbnQubmFtZSArCiAgICAgICAgICAiIGF0ICIgKwogICAgICAgICAgbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGFwcC5zaWduYXR1cmUgPSBhd2FpdCBhcHAud2ViMy5ldGgucGVyc29uYWwuc2lnbigKICAgICAgICAgICAgYXBwLmNvZGUsCiAgICAgICAgICAgIGFwcC5hY2NvdW50CiAgICAgICAgICApOwogICAgICAgICAgY29uc29sZS5sb2coInNpZ25hdHVyZSBpczoiLCBhcHAuc2lnbmF0dXJlKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBhbGVydChlLm1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICBpZiAoYXBwLmFjY291bnQgIT09IHVuZGVmaW5lZCAmJiBhcHAuc2lnbmF0dXJlLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGFwcC5pc1VwbG9hZGluZ0lQRlMgPSB0cnVlOwogICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZmlsZSIsIGFwcC5maWxlVG9NaW50KTsKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgiZGVzY3JpcHRpb24iLCBhcHAuZGVzY3JpcHRpb24pOwogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJuYW1lIiwgYXBwLm5hbWUpOwogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJzaWduYXR1cmUiLCB7CiAgICAgICAgICAgIHNpZ25hdHVyZTogYXBwLnNpZ25hdHVyZSwKICAgICAgICAgICAgbWVzc2FnZTogYXBwLmNvZGUsCiAgICAgICAgICB9KTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJmaWxlbmFtZToiLCBhcHAubmFtZSk7CiAgICAgICAgICBjb25zb2xlLmxvZygiZGVzY3JpcHRpb246IiwgYXBwLmRlc2NyaXB0aW9uKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJJbSBzdGFydGluZyB0byBjb211bmljYXRpbmcgd2l0aCBBUEkiKTsKICAgICAgICAgIC8vY29tZSBhcHBlbmQgbWV0dGVyZSBub21lIGRlc3JpemlvbmUKCiAgICAgICAgICBheGlvcyh7CiAgICAgICAgICAgIG1ldGhvZDogInBvc3QiLAogICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LlZVRV9BUFBfQVBJX1VSTCwKICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogIm11bHRpcGFydC9mb3JtLWRhdGEiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICBhcHAuaXBmc0ZpbGUgPSByZXNwb25zZS5kYXRhLkhhc2g7CiAgICAgICAgICAgIGFwcC5pc1VwbG9hZGluZ0lQRlMgPSBmYWxzZTsKICAgICAgICAgICAgLy8gZmlsZSBkaSByaXNwb3N0YSDDqCBnacOgIHByb250byBwZXIgaWwgbWludGluZyAoYXBwLmlwZnNNZXRhZGF0YSkKICAgICAgICAgICAgYXBwLmlwZnNNZXRhZGF0YSA9IHRydWU7CiAgICAgICAgICB9KTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJBUEkgZm9ybSBzdWJtaXR0ZWQiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQoIlNpZ24gbWVzc2FnZSBmaXJzdCEiKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWxlcnQoIlNlbGVjdCBhIGZpbGUgZmlyc3QhIik7CiAgICAgIH0KICAgIH0sCgogICAgLy9UTyBETyBhbCBwb3N0byBkaSBjcmVhdGUganNvbiBmYXJlIGlsIG1pbnQKICAgIGFzeW5jIG1pbnQoKSB7CiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7CiAgICAgIGlmICghYXBwLmlzTWludGluZykgewogICAgICAgIGFwcC5pc01pbnRpbmcgPSB0cnVlOwogICAgICAgIC8vIHNlIMOoIDExNTUKICAgICAgICAvLyBwcmVwYXJlIChhbW91bnQsIGlwZnMpCiAgICAgICAgLy8gcG9pIG1pbnQgKGFtb3VudCkKICAgICAgICAvLyBzZSDDqCA3MjEKICAgICAgICAvLyBtaW50bmZ0IChpcGZzKQogICAgICAgIHRyeSB7CiAgICAgICAgICBsZXQgbWludGVkID0gYXdhaXQgYXBwLmNvbnRyYWN0Lm1ldGhvZHMKICAgICAgICAgICAgLm1pbnRPcGVyYShhcHAuaXBmc01ldGFkYXRhKQogICAgICAgICAgICAuc2VuZCh7IGZyb206IHRoaXMuYWNjb3VudCB9KTsKICAgICAgICAgIGFsZXJ0KCJTdWNjZXNzZnVsbHkgbWludGVkIGF0OiAiICsgbWludGVkLnRyYW5zYWN0aW9uSGFzaCk7CiAgICAgICAgICBhcHAuaXNNaW50aW5nID0gZmFsc2U7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgYWxlcnQoZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["Mint.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Mint.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-if=\"account\">\n      <b>Welcome back</b><br /><i style=\"font-size: 12px\">{{ account }}</i>\n      <div v-if=\"account && isContractChecked\">\n        <p>You are working on contract:</p>\n        <p>\n          <b>{{ contractAddress }}</b>\n        </p>\n      </div>\n      <hr />\n      <div v-if=\"!isContractChecked\">\n        <b-field label=\"Contract\">\n          <b-input v-model=\"contractAddress\"></b-input>\n        </b-field>\n        <b-button class=\"mt-2 is-primary\" @click=\"fetchContract()\"\n          >Submit</b-button\n        >\n      </div>\n\n      <div v-if=\"isContractChecked\" style=\"padding: 0 20px\">\n        <b-field v-if=\"!fileToMint.name\">\n          <b-upload v-model=\"fileToMint\" expanded drag-drop>\n            <section class=\"section\">\n              <div class=\"content has-text-centered\">\n                <p>Drop your files here or click to upload</p>\n              </div>\n            </section>\n          </b-upload>\n        </b-field>\n        <b-field label=\"Name\">\n          <b-input v-model=\"name\"></b-input>\n        </b-field>\n        <b-field label=\"Description\">\n          <b-input\n            maxlength=\"200\"\n            v-model=\"description\"\n            type=\"textarea\"\n          ></b-input>\n        </b-field>\n        <b-field label=\"Amount\">\n          <b-input v-model=\"amount\" type=\"number\"></b-input>\n        </b-field>\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && ipfsMetadata && !isMinting\"\n          expanded\n          v-on:click=\"mint\"\n          >MINT!</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"!ipfsFile && !ipfsMetadata && !isUploadingIPFS\"\n          expanded\n          v-on:click=\"uploadFile\"\n          >Upload file to IPFS</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && !ipfsMetadata && !isUploadingMetadata\"\n          expanded\n          v-on:click=\"createJson\"\n          >Upload metadata to IPFS</b-button\n        ><br />\n        <div v-if=\"fileToMint.name\">\n          Selected file: <b>{{ fileToMint.name }}</b>\n        </div>\n        <div v-if=\"ipfsFile\">\n          File IPFS hash is:\n          <b\n            ><a :href=\"'https://ipfs.io/ipfs/' + ipfsFile\" target=\"_blank\">{{\n              ipfsFile\n            }}</a></b\n          >\n        </div>\n        <div v-if=\"ipfsMetadata\">\n          Metadata IPFS hash is:\n          <b\n            ><a\n              :href=\"'https://ipfs.io/ipfs/' + ipfsMetadata\"\n              target=\"_blank\"\n              >{{ ipfsMetadata }}</a\n            ></b\n          >\n        </div>\n        <div v-if=\"isMinting\">Minting NFT, please wait...</div>\n        <div v-if=\"isUploadingIPFS\">Uploading file to IPFS, please wait...</div>\n        <div v-if=\"isUploadingMetadata\">\n          Uploading metadata to IPFS, please wait...\n        </div>\n      </div>\n    </div>\n    <div v-if=\"!account\">\n      Please connect your Metamask wallet first,<br />window should be open\n      automatically or click below button.<br /><br />\n      <b-button type=\"is-primary\" v-on:click=\"connect\"\n        >CONNECT METAMASK</b-button\n      >\n    </div>\n  </div>\n</template>\n\n<script>\nvar Web3 = require(\"web3\");\nconst ABI_721 = require(\"../util/abi721.json\");\nconst ABI_1155 = require(\"../util/abi1155.json\");\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexport default {\n  name: \"Mint\",\n  data() {\n    return {\n      web3: new Web3(window.ethereum),\n      contractAddress: \"\",\n      account: \"\",\n      isContractChecked: \"\",\n      // contract: {},\n      license: \"\",\n      signature: \"\",\n      code: \"\",\n      licenses: [\n        \"CC BY\",\n        \"CC BY-SA\",\n        \"CC BY-NC\",\n        \"CC BY-NC-SA\",\n        \"CC BY-ND\",\n        \"CC BY-NC-ND\",\n        \"CC0\",\n      ],\n      fileToMint: {},\n      isUploadingIPFS: false,\n      isUploadingMetadata: false,\n      isMinting: false,\n      name: \"\",\n      ipfsFile: \"\",\n      ipfsMetadata: \"\",\n      description: \"\",\n      axios: axios,\n      amount: \"\",\n      infuraURL: \"https://ipfs.infura.io:5001/api/v0/add\",\n    };\n  },\n  mounted() {\n    this.connect();\n  },\n  methods: {\n    async connect() {\n      const app = this;\n      window.ethereum.enable();\n      let accounts = await app.web3.eth.getAccounts();\n      // this.contract = contract;\n      app.account = accounts[0];\n      // fare un fetch per vedere se c'è l'indirizzo del contratto nello storage\n      let contractChecked = localStorage.getItem(\n        \"contract-1155\",\n        app.contractAddress\n      );\n      console.log(\"Contract address inserted\", contractChecked);\n      if (\n        contractChecked !== null &&\n        contractChecked !== undefined &&\n        contractChecked.length > 0\n      ) {\n        app.isContractChecked = true;\n        console.log(app.isContractChecked);\n      } else {\n        app.isContractChecked = false;\n      }\n    },\n\n    async fetchContract() {\n      const app = this;\n      console.log(\"fetching contract\");\n      try {\n        let checkContract1155 = await new app.web3.eth.Contract(\n          ABI_1155,\n          app.contractAddress,\n          {\n            gasLimit: \"5000000\",\n          }\n        );\n        console.log(checkContract1155);\n        if (checkContract1155.methods.prepare !== undefined) {\n          console.log(\"starting checking contract 1155\");\n          localStorage.setItem(\"contract-1155\", app.contractAddress);\n          console.log(\"1155 is checked\", checkContract1155);\n          app.isContractChecked = true;\n        } else {\n          let checkContract721 = await new app.web3.eth.Contract(\n            ABI_721,\n            app.contractAddress,\n            {\n              gasLimit: \"5000000\",\n            }\n          );\n          if (checkContract721.methods.returnTokenURI !== undefined) {\n            console.log(\"starting checking contract 721\");\n            localStorage.setItem(\"contract-755\", app.contractAddress);\n            console.log(\"721 is checked\", checkContract1155);\n            app.isContractChecked = true;\n          } else {\n            alert(\"The contract address that you have inserted it's not valid\");\n            console.log(\"KERNEL PANIC\");\n          }\n        }\n      } catch (e) {\n        alert(\"error\");\n      }\n    },\n\n    async uploadFile() {\n      const app = this;\n      if (app.fileToMint.name && !app.isUploadingIPFS) {\n        //chiedere firma di un messaggio al metamask (\"Create metadata for  app.fileToMint.name at new Date().getTime()\")\n        //per mandare il messaggio fare una chiamata:\n        app.code =\n          \"Create metadata for \" +\n          app.fileToMint.name +\n          \" at \" +\n          new Date().getTime();\n        try {\n          app.signature = await app.web3.eth.personal.sign(\n            app.code,\n            app.account\n          );\n          console.log(\"signature is:\", app.signature);\n        } catch (e) {\n          alert(e.message);\n        }\n        if (app.account !== undefined && app.signature.length > 0) {\n          app.isUploadingIPFS = true;\n          const formData = new FormData();\n          formData.append(\"file\", app.fileToMint);\n          formData.append(\"description\", app.description);\n          formData.append(\"name\", app.name);\n          formData.append(\"signature\", {\n            signature: app.signature,\n            message: app.code,\n          });\n          console.log(\"filename:\", app.name);\n          console.log(\"description:\", app.description);\n          console.log(\"Im starting to comunicating with API\");\n          //come append mettere nome desrizione\n\n          axios({\n            method: \"post\",\n            url: process.env.VUE_APP_API_URL,\n            data: formData,\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }).then(function(response) {\n            app.ipfsFile = response.data.Hash;\n            app.isUploadingIPFS = false;\n            // file di risposta è già pronto per il minting (app.ipfsMetadata)\n            app.ipfsMetadata = true;\n          });\n          console.log(\"API form submitted\");\n        } else {\n          alert(\"Sign message first!\");\n        }\n      } else {\n        alert(\"Select a file first!\");\n      }\n    },\n\n    //TO DO al posto di create json fare il mint\n    async mint() {\n      const app = this;\n      if (!app.isMinting) {\n        app.isMinting = true;\n        // se è 1155\n        // prepare (amount, ipfs)\n        // poi mint (amount)\n        // se è 721\n        // mintnft (ipfs)\n        try {\n          let minted = await app.contract.methods\n            .mintOpera(app.ipfsMetadata)\n            .send({ from: this.account });\n          alert(\"Successfully minted at: \" + minted.transactionHash);\n          app.isMinting = false;\n        } catch (e) {\n          alert(e);\n        }\n      }\n    },\n  },\n};\n</script>\n"]}]}