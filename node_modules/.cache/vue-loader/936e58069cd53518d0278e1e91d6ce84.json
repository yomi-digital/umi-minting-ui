{"remainingRequest":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue","mtime":1643892053902},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/babel-loader/lib/index.js","mtime":1643881613258},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js","mtime":1643881624354}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCnZhciBXZWIzID0gcmVxdWlyZSgid2ViMyIpOwpjb25zdCBBQklfNzIxID0gcmVxdWlyZSgiLi4vdXRpbC9hYmk3MjEuanNvbiIpOwpjb25zdCBBQklfMTE1NSA9IHJlcXVpcmUoIi4uL3V0aWwvYWJpMTE1NS5qc29uIik7CmNvbnN0IGF4aW9zID0gcmVxdWlyZSgiYXhpb3MiKTsKY29uc3QgRm9ybURhdGEgPSByZXF1aXJlKCJmb3JtLWRhdGEiKTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWludCIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHdlYjM6IG5ldyBXZWIzKHdpbmRvdy5ldGhlcmV1bSksCiAgICAgIGNvbnRyYWN0QWRkcmVzczogIiIsCiAgICAgIGFjY291bnQ6ICIiLAogICAgICBpc0NvbnRyYWN0Q2hlY2tlZDogIiIsCiAgICAgIGNvbnRyYWN0U3RhbmRhcmQ6ICIiLAogICAgICAvLyBjb250cmFjdDoge30sCiAgICAgIHNpZ25hdHVyZTogIiIsCiAgICAgIGNvZGU6ICIiLAogICAgICBmaWxlVG9NaW50OiB7fSwKICAgICAgaXNVcGxvYWRpbmdJUEZTOiBmYWxzZSwKICAgICAgaXNVcGxvYWRpbmdNZXRhZGF0YTogZmFsc2UsCiAgICAgIGlzTWludGluZzogZmFsc2UsCiAgICAgIG5hbWU6ICIiLAogICAgICBpcGZzRmlsZTogIiIsCiAgICAgIGlwZnNNZXRhZGF0YTogIiIsCiAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgYXhpb3M6IGF4aW9zLAogICAgICBhbW91bnQ6ICIiLAogICAgICBpbmZ1cmFVUkw6ICJodHRwczovL2lwZnMuaW5mdXJhLmlvOjUwMDEvYXBpL3YwL2FkZCIsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuY29ubmVjdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgY29ubmVjdCgpIHsKICAgICAgY29uc3QgYXBwID0gdGhpczsKICAgICAgd2luZG93LmV0aGVyZXVtLmVuYWJsZSgpOwogICAgICBsZXQgYWNjb3VudHMgPSBhd2FpdCBhcHAud2ViMy5ldGguZ2V0QWNjb3VudHMoKTsKICAgICAgLy8gdGhpcy5jb250cmFjdCA9IGNvbnRyYWN0OwogICAgICBhcHAuYWNjb3VudCA9IGFjY291bnRzWzBdOwogICAgICAvLyBmYXJlIHVuIGZldGNoIHBlciB2ZWRlcmUgc2UgYyfDqCBsJ2luZGlyaXp6byBkZWwgY29udHJhdHRvIG5lbGxvIHN0b3JhZ2UKICAgICAgbGV0IGNvbnRyYWN0Q2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjb250cmFjdCIpOwogICAgICBsZXQgc3RhbmRhcmRDb250cmFjdCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJzdGFuZGFyZCIpOwogICAgICBjb25zb2xlLmxvZygiQ29udHJhY3QgYWRkcmVzcyBpbnNlcnRlZCIsIGNvbnRyYWN0Q2hlY2tlZCk7CiAgICAgIGlmICgKICAgICAgICBjb250cmFjdENoZWNrZWQgIT09IG51bGwgJiYKICAgICAgICBjb250cmFjdENoZWNrZWQgIT09IHVuZGVmaW5lZCAmJgogICAgICAgIGNvbnRyYWN0Q2hlY2tlZC5sZW5ndGggPiAwCiAgICAgICkgewogICAgICAgIGFwcC5pc0NvbnRyYWN0Q2hlY2tlZCA9IHRydWU7CiAgICAgICAgY29uc29sZS5sb2coYXBwLmlzQ29udHJhY3RDaGVja2VkKTsKICAgICAgICBhcHAuY29udHJhY3RBZGRyZXNzID0gY29udHJhY3RDaGVja2VkOwogICAgICAgIGFwcC5jb250cmFjdFN0YW5kYXJkID0gc3RhbmRhcmRDb250cmFjdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcHAuaXNDb250cmFjdENoZWNrZWQgPSBmYWxzZTsKICAgICAgfQogICAgfSwKCiAgICBhc3luYyBmZXRjaENvbnRyYWN0KCkgewogICAgICBjb25zdCBhcHAgPSB0aGlzOwogICAgICBjb25zb2xlLmxvZygiZmV0Y2hpbmcgY29udHJhY3QiKTsKICAgICAgdHJ5IHsKICAgICAgICBsZXQgY2hlY2tDb250cmFjdDExNTUgPSBhd2FpdCBuZXcgYXBwLndlYjMuZXRoLkNvbnRyYWN0KAogICAgICAgICAgQUJJXzExNTUsCiAgICAgICAgICBhcHAuY29udHJhY3RBZGRyZXNzLAogICAgICAgICAgewogICAgICAgICAgICBnYXNMaW1pdDogIjUwMDAwMDAiLAogICAgICAgICAgfQogICAgICAgICk7CiAgICAgICAgY29uc29sZS5sb2coY2hlY2tDb250cmFjdDExNTUpOwogICAgICAgIGlmIChjaGVja0NvbnRyYWN0MTE1NS5tZXRob2RzLnByZXBhcmUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgY29uc29sZS5sb2coInN0YXJ0aW5nIGNoZWNraW5nIGNvbnRyYWN0IDExNTUiKTsKICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJjb250cmFjdCIsIGFwcC5jb250cmFjdEFkZHJlc3MpOwogICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oInN0YW5kYXJkIiwgIjExNTUiKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCIxMTU1IGlzIGNoZWNrZWQiLCBjaGVja0NvbnRyYWN0MTE1NSk7CiAgICAgICAgICBhcHAuaXNDb250cmFjdENoZWNrZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsZXQgY2hlY2tDb250cmFjdDcyMSA9IGF3YWl0IG5ldyBhcHAud2ViMy5ldGguQ29udHJhY3QoCiAgICAgICAgICAgIEFCSV83MjEsCiAgICAgICAgICAgIGFwcC5jb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBnYXNMaW1pdDogIjUwMDAwMDAiLAogICAgICAgICAgICB9CiAgICAgICAgICApOwogICAgICAgICAgaWYgKGNoZWNrQ29udHJhY3Q3MjEubWV0aG9kcy5yZXR1cm5Ub2tlblVSSSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJzdGFydGluZyBjaGVja2luZyBjb250cmFjdCA3MjEiKTsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImNvbnRyYWN0IiwgYXBwLmNvbnRyYWN0QWRkcmVzcyk7CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJzdGFuZGFyZCIsICI3MjEiKTsKICAgICAgICAgICAgY29uc29sZS5sb2coIjcyMSBpcyBjaGVja2VkIiwgY2hlY2tDb250cmFjdDExNTUpOwogICAgICAgICAgICBhcHAuaXNDb250cmFjdENoZWNrZWQgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQoIlRoZSBjb250cmFjdCBhZGRyZXNzIHRoYXQgeW91IGhhdmUgaW5zZXJ0ZWQgaXQncyBub3QgdmFsaWQiKTsKICAgICAgICAgICAgY29uc29sZS5sb2coIktFUk5FTCBQQU5JQyIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGFsZXJ0KCJlcnJvciIpOwogICAgICB9CiAgICB9LAoKICAgIGFzeW5jIHVwbG9hZEZpbGUoKSB7CiAgICAgIGNvbnN0IGFwcCA9IHRoaXM7CiAgICAgIGlmIChhcHAuZmlsZVRvTWludC5uYW1lICYmICFhcHAuaXNVcGxvYWRpbmdJUEZTKSB7CiAgICAgICAgLy9jaGllZGVyZSBmaXJtYSBkaSB1biBtZXNzYWdnaW8gYWwgbWV0YW1hc2sgKCJDcmVhdGUgbWV0YWRhdGEgZm9yICBhcHAuZmlsZVRvTWludC5uYW1lIGF0IG5ldyBEYXRlKCkuZ2V0VGltZSgpIikKICAgICAgICAvL3BlciBtYW5kYXJlIGlsIG1lc3NhZ2dpbyBmYXJlIHVuYSBjaGlhbWF0YToKICAgICAgICBhcHAuY29kZSA9CiAgICAgICAgICAiQ3JlYXRlIG1ldGFkYXRhIGZvciAiICsKICAgICAgICAgIGFwcC5maWxlVG9NaW50Lm5hbWUgKwogICAgICAgICAgIiBhdCAiICsKICAgICAgICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIHRyeSB7CiAgICAgICAgICBhcHAuc2lnbmF0dXJlID0gYXdhaXQgYXBwLndlYjMuZXRoLnBlcnNvbmFsLnNpZ24oCiAgICAgICAgICAgIGFwcC5jb2RlLAogICAgICAgICAgICBhcHAuYWNjb3VudAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJzaWduYXR1cmUgaXM6IiwgYXBwLnNpZ25hdHVyZSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgYWxlcnQoZS5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGFwcC5hY2NvdW50ICE9PSB1bmRlZmluZWQgJiYgYXBwLnNpZ25hdHVyZS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBhcHAuaXNVcGxvYWRpbmdJUEZTID0gdHJ1ZTsKICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoImZpbGUiLCBhcHAuZmlsZVRvTWludCk7CiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoImRlc2NyaXB0aW9uIiwgYXBwLmRlc2NyaXB0aW9uKTsKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgibmFtZSIsIGFwcC5uYW1lKTsKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgic2lnbmF0dXJlIiwgewogICAgICAgICAgICBzaWduYXR1cmU6IGFwcC5zaWduYXR1cmUsCiAgICAgICAgICAgIG1lc3NhZ2U6IGFwcC5jb2RlLAogICAgICAgICAgfSk7CiAgICAgICAgICBjb25zb2xlLmxvZygiZmlsZW5hbWU6IiwgYXBwLm5hbWUpOwogICAgICAgICAgY29uc29sZS5sb2coImRlc2NyaXB0aW9uOiIsIGFwcC5kZXNjcmlwdGlvbik7CiAgICAgICAgICBjb25zb2xlLmxvZygiSW0gc3RhcnRpbmcgdG8gY29tdW5pY2F0aW5nIHdpdGggQVBJIik7CiAgICAgICAgICAvL2NvbWUgYXBwZW5kIG1ldHRlcmUgbm9tZSBkZXNyaXppb25lCgogICAgICAgICAgYXhpb3MoewogICAgICAgICAgICBtZXRob2Q6ICJwb3N0IiwKICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5WVUVfQVBQX0FQSV9VUkwsCiAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJtdWx0aXBhcnQvZm9ybS1kYXRhIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgYXBwLmlwZnNGaWxlID0gcmVzcG9uc2UuZGF0YS5IYXNoOwogICAgICAgICAgICBhcHAuaXNVcGxvYWRpbmdJUEZTID0gZmFsc2U7CiAgICAgICAgICAgIC8vIGZpbGUgZGkgcmlzcG9zdGEgw6ggZ2nDoCBwcm9udG8gcGVyIGlsIG1pbnRpbmcgKGFwcC5pcGZzTWV0YWRhdGEpCiAgICAgICAgICAgIGFwcC5pcGZzTWV0YWRhdGEgPSB0cnVlOwogICAgICAgICAgfSk7CiAgICAgICAgICBjb25zb2xlLmxvZygiQVBJIGZvcm0gc3VibWl0dGVkIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KCJTaWduIG1lc3NhZ2UgZmlyc3QhIik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGFsZXJ0KCJTZWxlY3QgYSBmaWxlIGZpcnN0ISIpOwogICAgICB9CiAgICB9LAoKICAgIC8vVE8gRE8gYWwgcG9zdG8gZGkgY3JlYXRlIGpzb24gZmFyZSBpbCBtaW50CiAgICBhc3luYyBtaW50KCkgewogICAgICBjb25zdCBhcHAgPSB0aGlzOwogICAgICBpZiAoIWFwcC5pc01pbnRpbmcpIHsKICAgICAgICBhcHAuaXNNaW50aW5nID0gdHJ1ZTsKICAgICAgICAvLyBzZSDDqCAxMTU1CiAgICAgICAgLy8gcHJlcGFyZSAoYW1vdW50LCBpcGZzKQogICAgICAgIC8vIHBvaSBtaW50IChhbW91bnQpCiAgICAgICAgLy8gc2Ugw6ggNzIxCiAgICAgICAgLy8gbWludG5mdCAoaXBmcykKICAgICAgICB0cnkgewogICAgICAgICAgbGV0IG1pbnRlZCA9IGF3YWl0IGFwcC5jb250cmFjdC5tZXRob2RzCiAgICAgICAgICAgIC5taW50T3BlcmEoYXBwLmlwZnNNZXRhZGF0YSkKICAgICAgICAgICAgLnNlbmQoeyBmcm9tOiB0aGlzLmFjY291bnQgfSk7CiAgICAgICAgICBhbGVydCgiU3VjY2Vzc2Z1bGx5IG1pbnRlZCBhdDogIiArIG1pbnRlZC50cmFuc2FjdGlvbkhhc2gpOwogICAgICAgICAgYXBwLmlzTWludGluZyA9IGZhbHNlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGFsZXJ0KGUpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["Mint.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Mint.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-if=\"account\">\n      <b>Welcome back</b><br /><i style=\"font-size: 12px\">{{ account }}</i>\n      <div v-if=\"account && isContractChecked\">\n        <p>You are working on contract:</p>\n        <p>\n          <b>{{ contractAddress }}</b>\n        </p>\n      </div>\n      <hr />\n      <div v-if=\"!isContractChecked\">\n        <b-field label=\"Contract\">\n          <b-input v-model=\"contractAddress\"></b-input>\n        </b-field>\n        <b-button class=\"mt-2 is-primary\" @click=\"fetchContract()\"\n          >Submit</b-button\n        >\n      </div>\n\n      <div v-if=\"isContractChecked\" style=\"padding: 0 20px\">\n        <b-field v-if=\"!fileToMint.name\">\n          <b-upload v-model=\"fileToMint\" expanded drag-drop>\n            <section class=\"section\">\n              <div class=\"content has-text-centered\">\n                <p>Drop your files here or click to upload</p>\n              </div>\n            </section>\n          </b-upload>\n        </b-field>\n        <b-field label=\"Name\">\n          <b-input v-model=\"name\"></b-input>\n        </b-field>\n        <b-field label=\"Description\">\n          <b-input\n            maxlength=\"200\"\n            v-model=\"description\"\n            type=\"textarea\"\n          ></b-input>\n        </b-field>\n        <b-field label=\"Amount\">\n          <b-input v-model=\"amount\" type=\"number\"></b-input>\n        </b-field>\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && ipfsMetadata && !isMinting\"\n          expanded\n          v-on:click=\"mint\"\n          >MINT!</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"!ipfsFile && !ipfsMetadata && !isUploadingIPFS\"\n          expanded\n          v-on:click=\"uploadFile\"\n          >Upload file to IPFS</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && !ipfsMetadata && !isUploadingMetadata\"\n          expanded\n          v-on:click=\"createJson\"\n          >Upload metadata to IPFS</b-button\n        ><br />\n        <div v-if=\"fileToMint.name\">\n          Selected file: <b>{{ fileToMint.name }}</b>\n        </div>\n        <div v-if=\"ipfsFile\">\n          File IPFS hash is:\n          <b\n            ><a :href=\"'https://ipfs.io/ipfs/' + ipfsFile\" target=\"_blank\">{{\n              ipfsFile\n            }}</a></b\n          >\n        </div>\n        <div v-if=\"ipfsMetadata\">\n          Metadata IPFS hash is:\n          <b\n            ><a\n              :href=\"'https://ipfs.io/ipfs/' + ipfsMetadata\"\n              target=\"_blank\"\n              >{{ ipfsMetadata }}</a\n            ></b\n          >\n        </div>\n        <div v-if=\"isMinting\">Minting NFT, please wait...</div>\n        <div v-if=\"isUploadingIPFS\">Uploading file to IPFS, please wait...</div>\n        <div v-if=\"isUploadingMetadata\">\n          Uploading metadata to IPFS, please wait...\n        </div>\n      </div>\n    </div>\n    <div v-if=\"!account\">\n      Please connect your Metamask wallet first,<br />window should be open\n      automatically or click below button.<br /><br />\n      <b-button type=\"is-primary\" v-on:click=\"connect\"\n        >CONNECT METAMASK</b-button\n      >\n    </div>\n  </div>\n</template>\n\n<script>\nvar Web3 = require(\"web3\");\nconst ABI_721 = require(\"../util/abi721.json\");\nconst ABI_1155 = require(\"../util/abi1155.json\");\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexport default {\n  name: \"Mint\",\n  data() {\n    return {\n      web3: new Web3(window.ethereum),\n      contractAddress: \"\",\n      account: \"\",\n      isContractChecked: \"\",\n      contractStandard: \"\",\n      // contract: {},\n      signature: \"\",\n      code: \"\",\n      fileToMint: {},\n      isUploadingIPFS: false,\n      isUploadingMetadata: false,\n      isMinting: false,\n      name: \"\",\n      ipfsFile: \"\",\n      ipfsMetadata: \"\",\n      description: \"\",\n      axios: axios,\n      amount: \"\",\n      infuraURL: \"https://ipfs.infura.io:5001/api/v0/add\",\n    };\n  },\n  mounted() {\n    this.connect();\n  },\n  methods: {\n    async connect() {\n      const app = this;\n      window.ethereum.enable();\n      let accounts = await app.web3.eth.getAccounts();\n      // this.contract = contract;\n      app.account = accounts[0];\n      // fare un fetch per vedere se c'è l'indirizzo del contratto nello storage\n      let contractChecked = localStorage.getItem(\"contract\");\n      let standardContract = localStorage.getItem(\"standard\");\n      console.log(\"Contract address inserted\", contractChecked);\n      if (\n        contractChecked !== null &&\n        contractChecked !== undefined &&\n        contractChecked.length > 0\n      ) {\n        app.isContractChecked = true;\n        console.log(app.isContractChecked);\n        app.contractAddress = contractChecked;\n        app.contractStandard = standardContract;\n      } else {\n        app.isContractChecked = false;\n      }\n    },\n\n    async fetchContract() {\n      const app = this;\n      console.log(\"fetching contract\");\n      try {\n        let checkContract1155 = await new app.web3.eth.Contract(\n          ABI_1155,\n          app.contractAddress,\n          {\n            gasLimit: \"5000000\",\n          }\n        );\n        console.log(checkContract1155);\n        if (checkContract1155.methods.prepare !== undefined) {\n          console.log(\"starting checking contract 1155\");\n          localStorage.setItem(\"contract\", app.contractAddress);\n          localStorage.setItem(\"standard\", \"1155\");\n          console.log(\"1155 is checked\", checkContract1155);\n          app.isContractChecked = true;\n        } else {\n          let checkContract721 = await new app.web3.eth.Contract(\n            ABI_721,\n            app.contractAddress,\n            {\n              gasLimit: \"5000000\",\n            }\n          );\n          if (checkContract721.methods.returnTokenURI !== undefined) {\n            console.log(\"starting checking contract 721\");\n            localStorage.setItem(\"contract\", app.contractAddress);\n            localStorage.setItem(\"standard\", \"721\");\n            console.log(\"721 is checked\", checkContract1155);\n            app.isContractChecked = true;\n          } else {\n            alert(\"The contract address that you have inserted it's not valid\");\n            console.log(\"KERNEL PANIC\");\n          }\n        }\n      } catch (e) {\n        alert(\"error\");\n      }\n    },\n\n    async uploadFile() {\n      const app = this;\n      if (app.fileToMint.name && !app.isUploadingIPFS) {\n        //chiedere firma di un messaggio al metamask (\"Create metadata for  app.fileToMint.name at new Date().getTime()\")\n        //per mandare il messaggio fare una chiamata:\n        app.code =\n          \"Create metadata for \" +\n          app.fileToMint.name +\n          \" at \" +\n          new Date().getTime();\n        try {\n          app.signature = await app.web3.eth.personal.sign(\n            app.code,\n            app.account\n          );\n          console.log(\"signature is:\", app.signature);\n        } catch (e) {\n          alert(e.message);\n        }\n        if (app.account !== undefined && app.signature.length > 0) {\n          app.isUploadingIPFS = true;\n          const formData = new FormData();\n          formData.append(\"file\", app.fileToMint);\n          formData.append(\"description\", app.description);\n          formData.append(\"name\", app.name);\n          formData.append(\"signature\", {\n            signature: app.signature,\n            message: app.code,\n          });\n          console.log(\"filename:\", app.name);\n          console.log(\"description:\", app.description);\n          console.log(\"Im starting to comunicating with API\");\n          //come append mettere nome desrizione\n\n          axios({\n            method: \"post\",\n            url: process.env.VUE_APP_API_URL,\n            data: formData,\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }).then(function(response) {\n            app.ipfsFile = response.data.Hash;\n            app.isUploadingIPFS = false;\n            // file di risposta è già pronto per il minting (app.ipfsMetadata)\n            app.ipfsMetadata = true;\n          });\n          console.log(\"API form submitted\");\n        } else {\n          alert(\"Sign message first!\");\n        }\n      } else {\n        alert(\"Select a file first!\");\n      }\n    },\n\n    //TO DO al posto di create json fare il mint\n    async mint() {\n      const app = this;\n      if (!app.isMinting) {\n        app.isMinting = true;\n        // se è 1155\n        // prepare (amount, ipfs)\n        // poi mint (amount)\n        // se è 721\n        // mintnft (ipfs)\n        try {\n          let minted = await app.contract.methods\n            .mintOpera(app.ipfsMetadata)\n            .send({ from: this.account });\n          alert(\"Successfully minted at: \" + minted.transactionHash);\n          app.isMinting = false;\n        } catch (e) {\n          alert(e);\n        }\n      }\n    },\n  },\n};\n</script>\n"]}]}