{"remainingRequest":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/babel-loader/lib/index.js!/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/src/components/Mint.vue","mtime":1643892053902},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/babel-loader/lib/index.js","mtime":1643881613258},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/cache-loader/dist/cjs.js","mtime":1643034644106},{"path":"/Users/stefano/Desktop/GIT/Yomi/umi-minting-ui/node_modules/vue-loader/lib/index.js","mtime":1643881624354}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Mint.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CADA;AAEA,MAAA,eAAA,EAAA,EAFA;AAGA,MAAA,OAAA,EAAA,EAHA;AAIA,MAAA,iBAAA,EAAA,EAJA;AAKA,MAAA,gBAAA,EAAA,EALA;AAMA;AACA,MAAA,SAAA,EAAA,EAPA;AAQA,MAAA,IAAA,EAAA,EARA;AASA,MAAA,UAAA,EAAA,EATA;AAUA,MAAA,eAAA,EAAA,KAVA;AAWA,MAAA,mBAAA,EAAA,KAXA;AAYA,MAAA,SAAA,EAAA,KAZA;AAaA,MAAA,IAAA,EAAA,EAbA;AAcA,MAAA,QAAA,EAAA,EAdA;AAeA,MAAA,YAAA,EAAA,EAfA;AAgBA,MAAA,WAAA,EAAA,EAhBA;AAiBA,MAAA,KAAA,EAAA,KAjBA;AAkBA,MAAA,MAAA,EAAA,EAlBA;AAmBA,MAAA,SAAA,EAAA;AAnBA,KAAA;AAqBA,GAxBA;AAyBA,EAAA,OAzBA,qBAyBA;AACA,SAAA,OAAA;AACA,GA3BA;AA4BA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,KADA;AAEA,gBAAA,MAAA,CAAA,QAAA,CAAA,MAAA;AAFA;AAAA,uBAGA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,EAHA;;AAAA;AAGA,gBAAA,QAHA;AAIA;AACA,gBAAA,GAAA,CAAA,OAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CALA,CAMA;;AACA,gBAAA,eAPA,GAOA,YAAA,CAAA,OAAA,CAAA,UAAA,CAPA;AAQA,gBAAA,gBARA,GAQA,YAAA,CAAA,OAAA,CAAA,UAAA,CARA;AASA,gBAAA,OAAA,CAAA,GAAA,CAAA,2BAAA,EAAA,eAAA;;AACA,oBACA,eAAA,KAAA,IAAA,IACA,eAAA,KAAA,SADA,IAEA,eAAA,CAAA,MAAA,GAAA,CAHA,EAIA;AACA,kBAAA,GAAA,CAAA,iBAAA,GAAA,IAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,iBAAA;AACA,kBAAA,GAAA,CAAA,eAAA,GAAA,eAAA;AACA,kBAAA,GAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,iBATA,MASA;AACA,kBAAA,GAAA,CAAA,iBAAA,GAAA,KAAA;AACA;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA,KAvBA;AAyBA,IAAA,aAzBA,2BAyBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,MADA;AAEA,gBAAA,OAAA,CAAA,GAAA,CAAA,mBAAA;AAFA;AAAA;AAAA,uBAIA,IAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CACA,QADA,EAEA,GAAA,CAAA,eAFA,EAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA,CAJA;;AAAA;AAIA,gBAAA,iBAJA;AAWA,gBAAA,OAAA,CAAA,GAAA,CAAA,iBAAA;;AAXA,sBAYA,iBAAA,CAAA,OAAA,CAAA,OAAA,KAAA,SAZA;AAAA;AAAA;AAAA;;AAaA,gBAAA,OAAA,CAAA,GAAA,CAAA,iCAAA;AACA,gBAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,GAAA,CAAA,eAAA;AACA,gBAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,MAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,iBAAA;AACA,gBAAA,GAAA,CAAA,iBAAA,GAAA,IAAA;AAjBA;AAAA;;AAAA;AAAA;AAAA,uBAmBA,IAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CACA,OADA,EAEA,GAAA,CAAA,eAFA,EAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA,CAnBA;;AAAA;AAmBA,gBAAA,gBAnBA;;AA0BA,oBAAA,gBAAA,CAAA,OAAA,CAAA,cAAA,KAAA,SAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gCAAA;AACA,kBAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,GAAA,CAAA,eAAA;AACA,kBAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,KAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,iBAAA;AACA,kBAAA,GAAA,CAAA,iBAAA,GAAA,IAAA;AACA,iBANA,MAMA;AACA,kBAAA,KAAA,CAAA,4DAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA;;AAnCA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsCA,gBAAA,KAAA,CAAA,OAAA,CAAA;;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA,KAjEA;AAmEA,IAAA,UAnEA,wBAmEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,MADA;;AAAA,sBAEA,GAAA,CAAA,UAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,eAFA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA,gBAAA,GAAA,CAAA,IAAA,GACA,yBACA,GAAA,CAAA,UAAA,CAAA,IADA,GAEA,MAFA,GAGA,IAAA,IAAA,GAAA,OAAA,EAJA;AALA;AAAA;AAAA,uBAWA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,IAAA,CACA,GAAA,CAAA,IADA,EAEA,GAAA,CAAA,OAFA,CAXA;;AAAA;AAWA,gBAAA,GAAA,CAAA,SAXA;AAeA,gBAAA,OAAA,CAAA,GAAA,CAAA,eAAA,EAAA,GAAA,CAAA,SAAA;AAfA;AAAA;;AAAA;AAAA;AAAA;AAiBA,gBAAA,KAAA,CAAA,aAAA,OAAA,CAAA;;AAjBA;AAmBA,oBAAA,GAAA,CAAA,OAAA,KAAA,SAAA,IAAA,GAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,kBAAA,GAAA,CAAA,eAAA,GAAA,IAAA;AACA,kBAAA,QAFA,GAEA,IAAA,QAAA,EAFA;AAGA,kBAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAAA,GAAA,CAAA,UAAA;AACA,kBAAA,QAAA,CAAA,MAAA,CAAA,aAAA,EAAA,GAAA,CAAA,WAAA;AACA,kBAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAAA,GAAA,CAAA,IAAA;AACA,kBAAA,QAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,oBAAA,SAAA,EAAA,GAAA,CAAA,SADA;AAEA,oBAAA,OAAA,EAAA,GAAA,CAAA;AAFA,mBAAA;AAIA,kBAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,GAAA,CAAA,IAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,cAAA,EAAA,GAAA,CAAA,WAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,sCAAA,EAZA,CAaA;;AAEA,kBAAA,KAAA,CAAA;AACA,oBAAA,MAAA,EAAA,MADA;AAEA,oBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,eAFA;AAGA,oBAAA,IAAA,EAAA,QAHA;AAIA,oBAAA,OAAA,EAAA;AACA,sCAAA;AADA;AAJA,mBAAA,CAAA,CAOA,IAPA,CAOA,UAAA,QAAA,EAAA;AACA,oBAAA,GAAA,CAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AACA,oBAAA,GAAA,CAAA,eAAA,GAAA,KAAA,CAFA,CAGA;;AACA,oBAAA,GAAA,CAAA,YAAA,GAAA,IAAA;AACA,mBAZA;AAaA,kBAAA,OAAA,CAAA,GAAA,CAAA,oBAAA;AACA,iBA7BA,MA6BA;AACA,kBAAA,KAAA,CAAA,qBAAA,CAAA;AACA;;AAlDA;AAAA;;AAAA;AAoDA,gBAAA,KAAA,CAAA,sBAAA,CAAA;;AApDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDA,KAzHA;AA2HA;AACA,IAAA,IA5HA,kBA4HA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,GADA,GACA,MADA;;AAAA,oBAEA,GAAA,CAAA,SAFA;AAAA;AAAA;AAAA;;AAGA,gBAAA,GAAA,CAAA,SAAA,GAAA,IAAA,CAHA,CAIA;AACA;AACA;AACA;AACA;;AARA;AAAA;AAAA,uBAUA,GAAA,CAAA,QAAA,CAAA,OAAA,CACA,SADA,CACA,GAAA,CAAA,YADA,EAEA,IAFA,CAEA;AAAA,kBAAA,IAAA,EAAA,MAAA,CAAA;AAAA,iBAFA,CAVA;;AAAA;AAUA,gBAAA,MAVA;AAaA,gBAAA,KAAA,CAAA,6BAAA,MAAA,CAAA,eAAA,CAAA;AACA,gBAAA,GAAA,CAAA,SAAA,GAAA,KAAA;AAdA;AAAA;;AAAA;AAAA;AAAA;AAgBA,gBAAA,KAAA,cAAA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AA/IA;AA5BA,CAAA","sourcesContent":["<template>\n  <div>\n    <div v-if=\"account\">\n      <b>Welcome back</b><br /><i style=\"font-size: 12px\">{{ account }}</i>\n      <div v-if=\"account && isContractChecked\">\n        <p>You are working on contract:</p>\n        <p>\n          <b>{{ contractAddress }}</b>\n        </p>\n      </div>\n      <hr />\n      <div v-if=\"!isContractChecked\">\n        <b-field label=\"Contract\">\n          <b-input v-model=\"contractAddress\"></b-input>\n        </b-field>\n        <b-button class=\"mt-2 is-primary\" @click=\"fetchContract()\"\n          >Submit</b-button\n        >\n      </div>\n\n      <div v-if=\"isContractChecked\" style=\"padding: 0 20px\">\n        <b-field v-if=\"!fileToMint.name\">\n          <b-upload v-model=\"fileToMint\" expanded drag-drop>\n            <section class=\"section\">\n              <div class=\"content has-text-centered\">\n                <p>Drop your files here or click to upload</p>\n              </div>\n            </section>\n          </b-upload>\n        </b-field>\n        <b-field label=\"Name\">\n          <b-input v-model=\"name\"></b-input>\n        </b-field>\n        <b-field label=\"Description\">\n          <b-input\n            maxlength=\"200\"\n            v-model=\"description\"\n            type=\"textarea\"\n          ></b-input>\n        </b-field>\n        <b-field label=\"Amount\">\n          <b-input v-model=\"amount\" type=\"number\"></b-input>\n        </b-field>\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && ipfsMetadata && !isMinting\"\n          expanded\n          v-on:click=\"mint\"\n          >MINT!</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"!ipfsFile && !ipfsMetadata && !isUploadingIPFS\"\n          expanded\n          v-on:click=\"uploadFile\"\n          >Upload file to IPFS</b-button\n        >\n        <b-button\n          type=\"is-primary\"\n          v-if=\"ipfsFile && !ipfsMetadata && !isUploadingMetadata\"\n          expanded\n          v-on:click=\"createJson\"\n          >Upload metadata to IPFS</b-button\n        ><br />\n        <div v-if=\"fileToMint.name\">\n          Selected file: <b>{{ fileToMint.name }}</b>\n        </div>\n        <div v-if=\"ipfsFile\">\n          File IPFS hash is:\n          <b\n            ><a :href=\"'https://ipfs.io/ipfs/' + ipfsFile\" target=\"_blank\">{{\n              ipfsFile\n            }}</a></b\n          >\n        </div>\n        <div v-if=\"ipfsMetadata\">\n          Metadata IPFS hash is:\n          <b\n            ><a\n              :href=\"'https://ipfs.io/ipfs/' + ipfsMetadata\"\n              target=\"_blank\"\n              >{{ ipfsMetadata }}</a\n            ></b\n          >\n        </div>\n        <div v-if=\"isMinting\">Minting NFT, please wait...</div>\n        <div v-if=\"isUploadingIPFS\">Uploading file to IPFS, please wait...</div>\n        <div v-if=\"isUploadingMetadata\">\n          Uploading metadata to IPFS, please wait...\n        </div>\n      </div>\n    </div>\n    <div v-if=\"!account\">\n      Please connect your Metamask wallet first,<br />window should be open\n      automatically or click below button.<br /><br />\n      <b-button type=\"is-primary\" v-on:click=\"connect\"\n        >CONNECT METAMASK</b-button\n      >\n    </div>\n  </div>\n</template>\n\n<script>\nvar Web3 = require(\"web3\");\nconst ABI_721 = require(\"../util/abi721.json\");\nconst ABI_1155 = require(\"../util/abi1155.json\");\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexport default {\n  name: \"Mint\",\n  data() {\n    return {\n      web3: new Web3(window.ethereum),\n      contractAddress: \"\",\n      account: \"\",\n      isContractChecked: \"\",\n      contractStandard: \"\",\n      // contract: {},\n      signature: \"\",\n      code: \"\",\n      fileToMint: {},\n      isUploadingIPFS: false,\n      isUploadingMetadata: false,\n      isMinting: false,\n      name: \"\",\n      ipfsFile: \"\",\n      ipfsMetadata: \"\",\n      description: \"\",\n      axios: axios,\n      amount: \"\",\n      infuraURL: \"https://ipfs.infura.io:5001/api/v0/add\",\n    };\n  },\n  mounted() {\n    this.connect();\n  },\n  methods: {\n    async connect() {\n      const app = this;\n      window.ethereum.enable();\n      let accounts = await app.web3.eth.getAccounts();\n      // this.contract = contract;\n      app.account = accounts[0];\n      // fare un fetch per vedere se c'è l'indirizzo del contratto nello storage\n      let contractChecked = localStorage.getItem(\"contract\");\n      let standardContract = localStorage.getItem(\"standard\");\n      console.log(\"Contract address inserted\", contractChecked);\n      if (\n        contractChecked !== null &&\n        contractChecked !== undefined &&\n        contractChecked.length > 0\n      ) {\n        app.isContractChecked = true;\n        console.log(app.isContractChecked);\n        app.contractAddress = contractChecked;\n        app.contractStandard = standardContract;\n      } else {\n        app.isContractChecked = false;\n      }\n    },\n\n    async fetchContract() {\n      const app = this;\n      console.log(\"fetching contract\");\n      try {\n        let checkContract1155 = await new app.web3.eth.Contract(\n          ABI_1155,\n          app.contractAddress,\n          {\n            gasLimit: \"5000000\",\n          }\n        );\n        console.log(checkContract1155);\n        if (checkContract1155.methods.prepare !== undefined) {\n          console.log(\"starting checking contract 1155\");\n          localStorage.setItem(\"contract\", app.contractAddress);\n          localStorage.setItem(\"standard\", \"1155\");\n          console.log(\"1155 is checked\", checkContract1155);\n          app.isContractChecked = true;\n        } else {\n          let checkContract721 = await new app.web3.eth.Contract(\n            ABI_721,\n            app.contractAddress,\n            {\n              gasLimit: \"5000000\",\n            }\n          );\n          if (checkContract721.methods.returnTokenURI !== undefined) {\n            console.log(\"starting checking contract 721\");\n            localStorage.setItem(\"contract\", app.contractAddress);\n            localStorage.setItem(\"standard\", \"721\");\n            console.log(\"721 is checked\", checkContract1155);\n            app.isContractChecked = true;\n          } else {\n            alert(\"The contract address that you have inserted it's not valid\");\n            console.log(\"KERNEL PANIC\");\n          }\n        }\n      } catch (e) {\n        alert(\"error\");\n      }\n    },\n\n    async uploadFile() {\n      const app = this;\n      if (app.fileToMint.name && !app.isUploadingIPFS) {\n        //chiedere firma di un messaggio al metamask (\"Create metadata for  app.fileToMint.name at new Date().getTime()\")\n        //per mandare il messaggio fare una chiamata:\n        app.code =\n          \"Create metadata for \" +\n          app.fileToMint.name +\n          \" at \" +\n          new Date().getTime();\n        try {\n          app.signature = await app.web3.eth.personal.sign(\n            app.code,\n            app.account\n          );\n          console.log(\"signature is:\", app.signature);\n        } catch (e) {\n          alert(e.message);\n        }\n        if (app.account !== undefined && app.signature.length > 0) {\n          app.isUploadingIPFS = true;\n          const formData = new FormData();\n          formData.append(\"file\", app.fileToMint);\n          formData.append(\"description\", app.description);\n          formData.append(\"name\", app.name);\n          formData.append(\"signature\", {\n            signature: app.signature,\n            message: app.code,\n          });\n          console.log(\"filename:\", app.name);\n          console.log(\"description:\", app.description);\n          console.log(\"Im starting to comunicating with API\");\n          //come append mettere nome desrizione\n\n          axios({\n            method: \"post\",\n            url: process.env.VUE_APP_API_URL,\n            data: formData,\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }).then(function(response) {\n            app.ipfsFile = response.data.Hash;\n            app.isUploadingIPFS = false;\n            // file di risposta è già pronto per il minting (app.ipfsMetadata)\n            app.ipfsMetadata = true;\n          });\n          console.log(\"API form submitted\");\n        } else {\n          alert(\"Sign message first!\");\n        }\n      } else {\n        alert(\"Select a file first!\");\n      }\n    },\n\n    //TO DO al posto di create json fare il mint\n    async mint() {\n      const app = this;\n      if (!app.isMinting) {\n        app.isMinting = true;\n        // se è 1155\n        // prepare (amount, ipfs)\n        // poi mint (amount)\n        // se è 721\n        // mintnft (ipfs)\n        try {\n          let minted = await app.contract.methods\n            .mintOpera(app.ipfsMetadata)\n            .send({ from: this.account });\n          alert(\"Successfully minted at: \" + minted.transactionHash);\n          app.isMinting = false;\n        } catch (e) {\n          alert(e);\n        }\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}